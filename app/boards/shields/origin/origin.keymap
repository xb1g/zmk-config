// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LCTRL k1  &ht LALT k2  &ht LGUI k3  &ht LSHFT k4
#define HRMR(k1,k2,k3,k4) &ht RSHFT k1  &ht RGUI k2  &ht RALT k3  &ht RCTRL k4

#define BASE 0
#define SYMB 1
#define NUM 2
#define FUNC 3
#define EXTR 4


/ {
    compatible = "zmk,firmware";
    model = "zmk-firmware";

    behaviors {
        td_mt: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            //hold tap, tap tap
            bindings = <&kp LSHFT>, <&kp LCTRL>, <&kp LALT>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
        toly: to_lyr {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&to 0>, <&to 1>, <&to 2>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp Q    &kp W   &kp E     &kp R     &kp T                                                 &kp Y     &kp U     &kp W     &kp O     &kp P
            &kp A    &kp S    &kp D     &kp F     &kp G                                                 &kp Y     &kp A     &kp S    &kp D     &kp P
            &kp Z    &kp X    &kp C     &kp V     &kp B                                                 &kp N     &kp M     &kp COMMA &kp DOT   &kp FSLH
                                &kp M  &kp SPACE  &kp K                     &kp SPACE  &kp SPACE  &kp SPACE 
            >;
        };

    };


};
