// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LCTRL k1  &ht LALT k2  &ht LGUI k3  &ht LSHFT k4
#define HRMR(k1,k2,k3,k4) &ht RSHFT k1  &ht RGUI k2  &ht RALT k3  &ht RCTRL k4

#define BASE 0
#define SYMB 1
#define NUM 2
#define FUNC 3
#define EXTR 4


/ {
    compatible = "zmk,firmware";
    model = "zmk-firmware";

    behaviors {
        td_mt: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            //hold tap, tap tap
            bindings = <&kp LSHFT>, <&kp LCTRL>, <&kp LALT>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
        toly: to_lyr {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&to 0>, <&to 1>, <&to 2>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp Q    &kp W    &kp E     &kp R     &kp T                                                &kp Y     &kp U     &kp I     &kp O     &kp P
            HRML(A,      S,       D,        F)    &kp G                                                 &kp H    HRMR(J,        K,        L,        SQT)
            &kp Z    &kp X    &kp C     &kp V     &kp B                                                 &kp N     &kp M     &kp COMMA &kp DOT   &kp FSLH
            &mt LSHFT SPACE &lt FUNC ESC  &kp SPACE                     &lt NUM ENTER &lt SYMB TAB  &kp BSPC
            >;
        };


        symbol_layer {

            bindings = <
            &kp TILDE     &kp EXCL     &kp AT     &kp HASH    &kp DOLLAR                                 &kp Y     &kp PLUS  &kp MINUS  &kp UNDER &kp P
            &kp BSLH     &kp QMARK &kp ASTRK  &kp GRAVE   &kp CARET                                      &kp PIPE  &kp EQUAL &kp UP     &kp L     &kp SEMI
            &trans     &trans     &kp COMMA &kp DOT   &kp FSLH                                           &trans    &kp LEFT  &kp DOWN &kp RIGHT   &kp FSLH
            &trans &mo EXTR &trans                                         &trans  &trans   &trans
            >;
        };

        number_layer {
            bindings = <
            &kp N1     &kp N2     &kp N3  &kp N4     &kp N5                                               &kp Y     &kp N7     &kp N8     &kp N9     &trans
            &kp N6     &kp N7     &kp N8  &kp N9      &kp N0                                              &kp N0     &kp N4     &kp N5     &kp N6     &kp N0
            &bt BT_DISC 0 &bt BT_NXT &bt BT_CLR  &bt BT_SEL 2   &kp M                                     &trans &kp N1     &kp N2    &kp N3      &kp FSLH
            &mt LGUI SPACE  &toly  &td_mt                      &kp SPACE &kp TAB   &kp BSPC
            >;

        };
        function_layer {
            bindings = <
            &kp N1     &kp N2     &kp LC(UP)  &kp CAPS     &kp  C_VOL_UP                                             &kp Y     &kp F7     &kp F8     &kp F9     &kp F10
            &kp N6     &kp LC(LEFT)     &kp LC(DOWN)  &kp LC(RIGHT)      &kp  C_VOL_DN                      &kp C_BRI_UP     &kp F4     &kp F5     &kp F6     &kp F11
            &bt BT_DISC 0 &bt BT_NXT &kp LG(LS(N3))  &kp LG(LS(NUMBER_4))   &trans                      &kp C_BRI_DN     &kp F1     &kp F2 &kp F3   &kp F12
            &mt LGUI SPACE  &trans  &td_mt                                                &trans &mo EXTR   &trans
            >;
        };

        extra_layer {
            // --------------------------------------------------------------------------------------------------------------------------------------------------------------------
            // |   ESC   |    Q    |    W    |    E    |    R    |    T    |                                          |    Y    |    U    |    I    |    O    |    P    |    \    |
            // |   TAB   |    A    |    S    |    D    |    F    |    G    |                                          |    H    |    J    |    K    |    L    |    ;    |    '    |
            // |  SHIFT  |    Z    |    X    |    C    |    V    |    B    | CTRL+A  | CTRL+C  |  |  CTRL+V |  CTRL+X |    N    |    M    |    ,    |    .    |    /    |  R CTRL |
            //                               |   GUI   |   DEL   | RETURN  |  SPACE  | ESCAPE  |  |  RETURN |  SPACE  |   TAB   |   BSPC  |  R ALT  |
            bindings = <
            &bt BT_DISC 0    &bt BT_DISC 1   &bt BT_DISC 2 &bt BT_DISC 3   &kp N5                                                  &kp Y     &kp U     &kp I     &kp O     &kp P
            &bt BT_SEL 0     &bt BT_SEL 1    &bt BT_SEL 2   &bt BT_SEL 3     &kp N0                                                &kp H     &kp J     &kp K     &kp L     &kp SEMI
            &bt BT_CLR &trans &bt BT_PRV  &bt BT_NXT   &kp M                                               &kp N     &kp M     &kp COMMA &kp DOT   &kp FSLH
            &sys_reset  &trans  &td_mt                      &trans &trans   &sys_reset
            >;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <1 11>;
            bindings = <&kp TAB>;
        };
        combo_bsp {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp BSPC>;
        };
        combo_1 {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp N1>;
        };
        combo_2 {
            timeout-ms = <50>;
            key-positions = <5 10>;
            bindings = <&kp N2>;
        };
        combo_boot {
            timeout-ms = <50>;
            key-positions = <1 2 3 4>;
            bindings = <&bootloader>;
        };
    };

};
